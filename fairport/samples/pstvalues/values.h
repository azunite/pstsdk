//
// This file is automatically generated, do not hand edit!
//

#include "..\..\util\primatives.h"
#include "..\..\disk\disk.h"

using namespace fairport;
using namespace fairport::disk;

namespace {
    struct value
    {
        const wchar_t* name;
        int v;
    };
}

const value values[] = {
	{ L"sizeof(uint)", sizeof(uint) },
	{ L"sizeof(ulong)", sizeof(ulong) },
	{ L"sizeof(ulonglong)", sizeof(ulonglong) },
	{ L"sizeof(longlong)", sizeof(longlong) },
	{ L"sizeof(byte)", sizeof(byte) },
	{ L"sizeof(ushort)", sizeof(ushort) },
	{ L"sizeof(node_id)", sizeof(node_id) },
	{ L"sizeof(block_id)", sizeof(block_id) },
	{ L"sizeof(page_id)", sizeof(page_id) },
	{ L"sizeof(heap_id)", sizeof(heap_id) },
	{ L"sizeof(heapnode_id)", sizeof(heapnode_id) },
	{ L"sizeof(prop_id)", sizeof(prop_id) },
	{ L"sizeof(row_id)", sizeof(row_id) },

	// enum nid_type
	{ L"nid_type_none", nid_type_none },
	{ L"nid_type_internal", nid_type_internal },
	{ L"nid_type_folder", nid_type_folder },
	{ L"nid_type_search_folder", nid_type_search_folder },
	{ L"nid_type_message", nid_type_message },
	{ L"nid_type_attachment", nid_type_attachment },
	{ L"nid_type_search_update_queue", nid_type_search_update_queue },
	{ L"nid_type_search_criteria_object", nid_type_search_criteria_object },
	{ L"nid_type_associated_message", nid_type_associated_message },
	{ L"nid_type_storage", nid_type_storage },
	{ L"nid_type_contents_table_index", nid_type_contents_table_index },
	{ L"nid_type_receive_folder_table", nid_type_receive_folder_table },
	{ L"nid_type_outgoing_queue_table", nid_type_outgoing_queue_table },
	{ L"nid_type_hierarchy_table", nid_type_hierarchy_table },
	{ L"nid_type_contents_table", nid_type_contents_table },
	{ L"nid_type_associated_contents_table", nid_type_associated_contents_table },
	{ L"nid_type_search_contents_table", nid_type_search_contents_table },
	{ L"nid_type_attachment_table", nid_type_attachment_table },
	{ L"nid_type_recipient_table", nid_type_recipient_table },
	{ L"nid_type_search_table_index", nid_type_search_table_index },
	{ L"nid_type_contents_smp", nid_type_contents_smp },
	{ L"nid_type_associated_contents_smp", nid_type_associated_contents_smp },
	{ L"nid_type_change_history_table", nid_type_change_history_table },
	{ L"nid_type_tombstone_table", nid_type_tombstone_table },
	{ L"nid_type_tombstone_date_table", nid_type_tombstone_date_table },
	{ L"nid_type_lrep_dups_table", nid_type_lrep_dups_table },
	{ L"nid_type_folder_path_tombstone_table", nid_type_folder_path_tombstone_table },
	{ L"nid_type_ltp", nid_type_ltp },
	{ L"nid_type_max", nid_type_max },

	{ L"nid_type_mask", nid_type_mask },

	// enum predefined_nid
	{ L"nid_message_store", nid_message_store },
	{ L"nid_name_id_map", nid_name_id_map },
	{ L"nid_normal_folder_template", nid_normal_folder_template },
	{ L"nid_search_folder_template", nid_search_folder_template },
	{ L"nid_root_folder", nid_root_folder },
	{ L"nid_search_management_queue", nid_search_management_queue },
	{ L"nid_search_activity_list", nid_search_activity_list },
	{ L"nid_search_domain_alternative", nid_search_domain_alternative },
	{ L"nid_search_domain_object", nid_search_domain_object },
	{ L"nid_search_gatherer_queue", nid_search_gatherer_queue },
	{ L"nid_search_gatherer_descriptor", nid_search_gatherer_descriptor },
	{ L"nid_table_rebuild_queue", nid_table_rebuild_queue },
	{ L"nid_junk_mail_pihsl", nid_junk_mail_pihsl },
	{ L"nid_search_gatherer_folder_queue", nid_search_gatherer_folder_queue },
	{ L"nid_tc_sub_props", nid_tc_sub_props },
	{ L"nid_index_template", nid_index_template },
	{ L"nid_hierarchy_table_template", nid_hierarchy_table_template },
	{ L"nid_contents_table_template", nid_contents_table_template },
	{ L"nid_associated_contents_table_template", nid_associated_contents_table_template },
	{ L"nid_search_contents_table_template", nid_search_contents_table_template },
	{ L"nid_smp_template", nid_smp_template },
	{ L"nid_tombstone_table_template", nid_tombstone_table_template },
	{ L"nid_lrep_dups_table_template", nid_lrep_dups_table_template },
	{ L"nid_receive_folders", nid_receive_folders },
	{ L"nid_outgoing_queue", nid_outgoing_queue },
	{ L"nid_attachment_table", nid_attachment_table },
	{ L"nid_recipient_table", nid_recipient_table },
	{ L"nid_change_history_table", nid_change_history_table },
	{ L"nid_tombstone_table", nid_tombstone_table },
	{ L"nid_tombstone_date_table", nid_tombstone_date_table },
	{ L"nid_all_message_search_folder", nid_all_message_search_folder },
	{ L"nid_all_message_search_contents", nid_all_message_search_contents },
	{ L"nid_lrep_gmp", nid_lrep_gmp },
	{ L"nid_lrep_folders_smp", nid_lrep_folders_smp },
	{ L"nid_lrep_folders_table", nid_lrep_folders_table },
	{ L"nid_folder_path_tombstone_table", nid_folder_path_tombstone_table },
	{ L"nid_hst_hmp", nid_hst_hmp },
	{ L"nid_index_prv_pub_base", nid_index_prv_pub_base },
	{ L"nid_pub_root_folder", nid_pub_root_folder },
	{ L"nid_prv_root_folder", nid_prv_root_folder },
	{ L"nid_criterr_notification", nid_criterr_notification },
	{ L"nid_object_notification", nid_object_notification },
	{ L"nid_newemail_notification", nid_newemail_notification },
	{ L"nid_extended_notification", nid_extended_notification },
	{ L"nid_indexing_notification", nid_indexing_notification },


	// enum heap_page_type
	{ L"heap_page_type_first", heap_page_type_first },
	{ L"heap_page_type_normal", heap_page_type_normal },
	{ L"heap_page_type_fill_bitmap", heap_page_type_fill_bitmap },


	// enum prop_type
	{ L"prop_type_unspecified", prop_type_unspecified },
	{ L"prop_type_null", prop_type_null },
	{ L"prop_type_short", prop_type_short },
	{ L"prop_type_mv_short", prop_type_mv_short },
	{ L"prop_type_long", prop_type_long },
	{ L"prop_type_mv_long", prop_type_mv_long },
	{ L"prop_type_float", prop_type_float },
	{ L"prop_type_mv_float", prop_type_mv_float },
	{ L"prop_type_double", prop_type_double },
	{ L"prop_type_mv_double", prop_type_mv_double },
	{ L"prop_type_currency", prop_type_currency },
	{ L"prop_type_mv_currency", prop_type_mv_currency },
	{ L"prop_type_apptime", prop_type_apptime },
	{ L"prop_type_mv_apptime", prop_type_mv_apptime },
	{ L"prop_type_error", prop_type_error },
	{ L"prop_type_boolean", prop_type_boolean },
	{ L"prop_type_object", prop_type_object },
	{ L"prop_type_longlong", prop_type_longlong },
	{ L"prop_type_mv_longlong", prop_type_mv_longlong },
	{ L"prop_type_string", prop_type_string },
	{ L"prop_type_mv_string", prop_type_mv_string },
	{ L"prop_type_wstring", prop_type_wstring },
	{ L"prop_type_mv_wstring", prop_type_mv_wstring },
	{ L"prop_type_systime", prop_type_systime },
	{ L"prop_type_mv_systime", prop_type_mv_systime },
	{ L"prop_type_guid", prop_type_guid },
	{ L"prop_type_mv_guid", prop_type_mv_guid },
	{ L"prop_type_binary", prop_type_binary },
	{ L"prop_type_mv_binary", prop_type_mv_binary },

	{ L"sizeof(win_guid)", sizeof(win_guid) },
	{ L"sizeof(block_reference<ulonglong>)", sizeof(block_reference<ulonglong>) },
	{ L"sizeof(block_reference<ulong>)", sizeof(block_reference<ulong>) },
	{ L"header_fmap_entries", header_fmap_entries },
	{ L"header_fpmap_size", header_fpmap_size },
	{ L"header_lock_entries", header_lock_entries },

	// enum database_format
	{ L"database_format_ansi", database_format_ansi },
	{ L"database_format_unicode", database_format_unicode },


	// enum database_type
	{ L"database_ost", database_ost },
	{ L"database_pst", database_pst },

	{ L"pst_magic", pst_magic },
	{ L"ost_magic", ost_magic },

	// enum crypt_method
	{ L"crypt_method_none", crypt_method_none },
	{ L"crypt_method_permute", crypt_method_permute },
	{ L"crypt_method_cyclic", crypt_method_cyclic },

	{ L"sizeof(root<ulonglong>)", sizeof(root<ulonglong>) },
	{ L"sizeof(root<ulong>)", sizeof(root<ulong>) },
	{ L"sizeof(header<ulonglong>)", sizeof(header<ulonglong>) },
	{ L"sizeof(header<ulong>)", sizeof(header<ulong>) },
	{ L"sizeof(header_crc_locations<ulonglong>)", sizeof(header_crc_locations<ulonglong>) },
	{ L"sizeof(header_crc_locations<ulong>)", sizeof(header_crc_locations<ulong>) },
	{ L"header_crc_locations<ulong>::start", header_crc_locations<ulong>::start },
	{ L"header_crc_locations<ulong>::end", header_crc_locations<ulong>::end },
	{ L"header_crc_locations<ulong>::length", header_crc_locations<ulong>::length },
	{ L"header_crc_locations<ulonglong>::partial_start", header_crc_locations<ulonglong>::partial_start },
	{ L"header_crc_locations<ulonglong>::partial_end", header_crc_locations<ulonglong>::partial_end },
	{ L"header_crc_locations<ulonglong>::partial_length", header_crc_locations<ulonglong>::partial_length },
	{ L"header_crc_locations<ulonglong>::full_start", header_crc_locations<ulonglong>::full_start },
	{ L"header_crc_locations<ulonglong>::full_end", header_crc_locations<ulonglong>::full_end },
	{ L"header_crc_locations<ulonglong>::full_length", header_crc_locations<ulonglong>::full_length },
	{ L"page_size", page_size },

	// enum page_type
	{ L"page_type_bbt", page_type_bbt },
	{ L"page_type_nbt", page_type_nbt },
	{ L"page_type_fmap", page_type_fmap },
	{ L"page_type_pmap", page_type_pmap },
	{ L"page_type_amap", page_type_amap },
	{ L"page_type_fpmap", page_type_fpmap },

	{ L"sizeof(page_trailer<ulonglong>)", sizeof(page_trailer<ulonglong>) },
	{ L"sizeof(page_trailer<ulong>)", sizeof(page_trailer<ulong>) },
	{ L"page<ulonglong>::page_data_size", page<ulonglong>::page_data_size },
	{ L"page<ulong>::page_data_size", page<ulong>::page_data_size },
	{ L"sizeof(page<ulonglong>)", sizeof(page<ulonglong>) },
	{ L"sizeof(page<ulong>)", sizeof(page<ulong>) },
	{ L"bytes_per_slot", bytes_per_slot },
	{ L"sizeof(amap_page<ulonglong>)", sizeof(amap_page<ulonglong>) },
	{ L"sizeof(amap_page<ulong>)", sizeof(amap_page<ulong>) },
	{ L"sizeof(pmap_page<ulonglong>)", sizeof(pmap_page<ulonglong>) },
	{ L"sizeof(pmap_page<ulong>)", sizeof(pmap_page<ulong>) },
	{ L"sizeof(fmap_page<ulonglong>)", sizeof(fmap_page<ulonglong>) },
	{ L"sizeof(fmap_page<ulong>)", sizeof(fmap_page<ulong>) },
	{ L"sizeof(fpmap_page<ulonglong>)", sizeof(fpmap_page<ulonglong>) },
	{ L"sizeof(fpmap_page<ulong>)", sizeof(fpmap_page<ulong>) },
	{ L"dlist_page<ulonglong>::extra_space", dlist_page<ulonglong>::extra_space },
	{ L"dlist_page<ulong>::extra_space", dlist_page<ulong>::extra_space },
	{ L"dlist_page<ulonglong>::max_entries", dlist_page<ulonglong>::max_entries },
	{ L"dlist_page<ulong>::max_entries", dlist_page<ulong>::max_entries },
	{ L"sizeof(dlist_page<ulonglong>)", sizeof(dlist_page<ulonglong>) },
	{ L"sizeof(dlist_page<ulong>)", sizeof(dlist_page<ulong>) },
	{ L"sizeof(bt_entry<ulonglong>)", sizeof(bt_entry<ulonglong>) },
	{ L"sizeof(bt_entry<ulong>)", sizeof(bt_entry<ulong>) },
	{ L"sizeof(nbt_leaf_entry<ulonglong>)", sizeof(nbt_leaf_entry<ulonglong>) },
	{ L"sizeof(nbt_leaf_entry<ulong>)", sizeof(nbt_leaf_entry<ulong>) },
	{ L"sizeof(bbt_leaf_entry<ulonglong>)", sizeof(bbt_leaf_entry<ulonglong>) },
	{ L"sizeof(bbt_leaf_entry<ulong>)", sizeof(bbt_leaf_entry<ulong>) },
	{ L"sizeof(nbt_nonleaf_page<ulonglong>)", sizeof(nbt_nonleaf_page<ulonglong>) },
	{ L"sizeof(nbt_nonleaf_page<ulong>)", sizeof(nbt_nonleaf_page<ulong>) },
	{ L"sizeof(bbt_nonleaf_page<ulonglong>)", sizeof(bbt_nonleaf_page<ulonglong>) },
	{ L"sizeof(bbt_nonleaf_page<ulong>)", sizeof(bbt_nonleaf_page<ulong>) },
	{ L"sizeof(nbt_leaf_page<ulonglong>)", sizeof(nbt_leaf_page<ulonglong>) },
	{ L"sizeof(nbt_leaf_page<ulong>)", sizeof(nbt_leaf_page<ulong>) },
	{ L"sizeof(bbt_leaf_page<ulonglong>)", sizeof(bbt_leaf_page<ulonglong>) },
	{ L"sizeof(bbt_leaf_page<ulong>)", sizeof(bbt_leaf_page<ulong>) },

	// enum block_types
	{ L"block_type_external", block_type_external },
	{ L"block_type_extended", block_type_extended },
	{ L"block_type_sub", block_type_sub },

	{ L"sizeof(block_trailer<ulonglong>)", sizeof(block_trailer<ulonglong>) },
	{ L"sizeof(block_trailer<ulong>)", sizeof(block_trailer<ulong>) },
	{ L"external_block<ulonglong>::max_size", external_block<ulonglong>::max_size },
	{ L"external_block<ulong>::max_size", external_block<ulong>::max_size },
	{ L"sizeof(external_block<ulonglong>)", sizeof(external_block<ulonglong>) },
	{ L"sizeof(external_block<ulong>)", sizeof(external_block<ulong>) },
	{ L"sizeof(extended_block<ulonglong>)", sizeof(extended_block<ulonglong>) },
	{ L"sizeof(extended_block<ulong>)", sizeof(extended_block<ulong>) },
	{ L"extended_block<ulonglong>::max_count", extended_block<ulonglong>::max_count },
	{ L"extended_block<ulonglong>::max_size", extended_block<ulonglong>::max_size },
	{ L"extended_block<ulong>::max_count", extended_block<ulong>::max_count },
	{ L"extended_block<ulong>::max_size", extended_block<ulong>::max_size },
	{ L"sizeof(sub_leaf_entry<ulonglong>)", sizeof(sub_leaf_entry<ulonglong>) },
	{ L"sizeof(sub_leaf_entry<ulong>)", sizeof(sub_leaf_entry<ulong>) },
	{ L"sizeof(sub_nonleaf_entry<ulonglong>)", sizeof(sub_nonleaf_entry<ulonglong>) },
	{ L"sizeof(sub_nonleaf_entry<ulong>)", sizeof(sub_nonleaf_entry<ulong>) },
	{ L"sizeof(sub_nonleaf_block<ulonglong>)", sizeof(sub_nonleaf_block<ulonglong>) },
	{ L"sizeof(sub_nonleaf_block<ulong>)", sizeof(sub_nonleaf_block<ulong>) },
	{ L"sizeof(sub_leaf_block<ulonglong>)", sizeof(sub_leaf_block<ulonglong>) },
	{ L"sizeof(sub_leaf_block<ulong>)", sizeof(sub_leaf_block<ulong>) },
	{ L"heap_signature", heap_signature },
	{ L"heap_max_alloc_size", heap_max_alloc_size },

	// enum heap_client_signature
	{ L"heap_sig_gmp", heap_sig_gmp },
	{ L"heap_sig_tc", heap_sig_tc },
	{ L"heap_sig_smp", heap_sig_smp },
	{ L"heap_sig_hmp", heap_sig_hmp },
	{ L"heap_sig_ch", heap_sig_ch },
	{ L"heap_sig_chtc", heap_sig_chtc },
	{ L"heap_sig_bth", heap_sig_bth },
	{ L"heap_sig_pc", heap_sig_pc },

	{ L"heap_first_header::fill_level_size", heap_first_header::fill_level_size },
	{ L"sizeof(heap_first_header)", sizeof(heap_first_header) },
	{ L"sizeof(heap_page_header)", sizeof(heap_page_header) },
	{ L"heap_page_fill_header::fill_level_size", heap_page_fill_header::fill_level_size },
	{ L"sizeof(heap_page_fill_header)", sizeof(heap_page_fill_header) },
	{ L"sizeof(heap_page_map)", sizeof(heap_page_map) },
	{ L"sizeof(bth_header)", sizeof(bth_header) },
	{ L"sizeof(prop_entry)", sizeof(prop_entry) },

	// enum tc_offsets

	{ L"sizeof(column_description)", sizeof(column_description) },
	{ L"sizeof(gust_column_description)", sizeof(gust_column_description) },
	{ L"sizeof(tc_header)", sizeof(tc_header) },
	{ L"sizeof(gust_header)", sizeof(gust_header) },
};
